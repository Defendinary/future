# Inputs are used by mutation
input RegistrationInput {
  username: String!
  email: String!
  password: String!
}


# Define the object that should be returned in BaseResult, If a field is followed by !, its required, if it is missing, Graphql will complain, and throw errors.
type UserNode implements BaseNode {
  id: ID!
  username: String
  email: String @isAuthenticated
}


# Define the BaseResult and define that items must consist of a list of UserNodes
type User implements BaseResult {
  paging: Paging
  error: String
  items: [UserNode!]
}
